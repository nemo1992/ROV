

#from __future__ import print_function, division
from __future__ import division

import serial
import string
import time

from visual import *
from struct import unpack
from binascii import unhexlify
from math import *
from array import *
from ctypes import *


grad2rad = 3.141592/180.0

roll=0
pitch=0
yaw=0
temp = 0.
baro=0
alt=0
count = 0
burst = 32
told = 0
tnew = 0
dt = 0
alt=0
press = 0.
prod_q =None
hq = None
k = 'n'

free_q =array('f',[0.,0.,0.,0.])

sea_press = 1011.9

SerialPort = 'COM10'

#euler = array('f',[0.,0.,0.])
#q = array('f',[0.,0.,0.,0.])
#acc = array('f',[0.,0.,0.])
#magn = array('f',[0.,0.,0.])
#gyro = array('f',[0.,0.,0.])

# Main scene
scene=display(title="10DOF DFRobot IMU test")
scene.range=(1.2,1.2,1.2)

#scene.forward = (0,-1,-0.25)
scene.forward = (1,0,-0.25)
scene.up=(0,0,1)
scene.width=600
scene.y=300


# Main scene objects
scene.select()



# IMU object
#platform = box(length=1, height=0.05, width=1, color=color.red)
platform = frame()
p_t=box(frame=platform, pos=(0,0.05,0), length=1, height=0.01, width=.5, color=color.red)
p_b=box(frame=platform,pos=(0,-0.05,0), length=1, height=0.01, width=.5, color=color.blue)
p_ls=box(frame=platform,pos=(0,0,.25), length=1, height=0.1, width=.01, color=color.green)
p_rs=box(frame=platform,pos=(0,0,-.25), length=1, height=0.1, width=.01, color=color.cyan)
p_fs=box(frame=platform,pos=(.495,0,0), length=.01, height=0.1, width=0.5, color=color.yellow)
p_bs=box(frame=platform,pos=(-0.495,0,0), length=.01, height=0.1, width=0.5, color=color.orange)



# configure the serial connections (the parameters differs on the device you are connecting to)
#p = serial.Serial(port=SerialPort,baudrate=38400, timeout = 1)
ser = serial.Serial('COM6',115200,timeout=0,rtscts=1)

time.sleep(1)


#p.flushInput()    # clean input buffer

#p.write("v")
#line = p.readline()
time.sleep(5)

while 1 :
    try:
        rate(20000)
        
        ser.write(".")
        time.sleep(1/20)
        #print "###"
        line = ser.read(100)
        #print "---"
        time.sleep(1/20)
        angles = line.split(",")
        time.sleep(1/20)
        
        if(ord(angles[0])==0):
            ax=(ord(angles[1])+ord(angles[2])*256)
            
        else:
            ax=(ord(angles[1])+ord(angles[2])*256)*-1
            
            
        if(ord(angles[3])==0):
            ay=(ord(angles[4])+ord(angles[5])*256)
            
        else:
            ay=(ord(angles[4])+ord(angles[5])*256)*-1
            

        if(ord(angles[6])==0):
            az=(ord(angles[7])+ord(angles[8])*256)
           
        else:
            az=(ord(angles[7])+ord(angles[8])*256)*-1
            
        roll = ax*grad2rad/10
        pitch = ay*grad2rad/10
        yaw =  az*grad2rad/10
              

        axis=(cos(pitch)*cos(yaw),-cos(pitch)*sin(yaw),sin(pitch)) 
        up=(sin(roll)*sin(yaw)+cos(roll)*sin(pitch)*cos(yaw),sin(roll)*cos(yaw)-cos(roll)*sin(pitch)*sin(yaw),-cos(roll)*cos(pitch))

        
        platform.axis=axis
        platform.up=up
        platform.length=1.0
        platform.width=0.65
    except ValueError:
        p.close    

p.close
        

